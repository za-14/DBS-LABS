-- LAB 7

-- PART B SQL STATEMENTS

-- Q1
CREATE TABLE STUDENT(
  StudentID INT PRIMARY KEY,
  StudentName varchar2(50)
);

CREATE TABLE COURSES(
  CourseID varchar2(10) PRIMARY KEY,
  Course varchar2(50)
);

CREATE TABLE ENROLLMENT(
  StudentID INT,
  CourseID varchar2(10),
  Grade varchar2(1),
  FID INT,
  CONSTRAINT PK_KEY PRIMARY KEY (StudentID, CourseID),
  CONSTRAINT FK_Student FOREIGN KEY (StudentID) REFERENCES STUDENT(StudentID),
  CONSTRAINT FK_Course FOREIGN KEY (CourseID) REFERENCES COURSES(CourseID)
);

CREATE TABLE FACULTY(
   FID INT PRIMARY KEY,
   FacultyName varchar2(50)
);

DROP TABLE
CREATE TABLE COURSES_FACULTY(
  CourseID varchar2(10),
  FID INT,
  CONSTRAINT PK_KEYY PRIMARY KEY (CourseID,FID),
  CONSTRAINT FK_Coursey FOREIGN KEY (CourseID) REFERENCES COURSES(CourseID),
  CONSTRAINT FK_Faculty FOREIGN KEY (FID) REFERENCES FACULTY(FID)
);

--Q2

INSERT INTO STUDENT VALUES (101, 'Ahmed');
INSERT INTO STUDENT VALUES (102, 'Fatima');
INSERT INTO STUDENT VALUES (103, 'Hassan');
INSERT INTO STUDENT VALUES (104, 'Aisha');

INSERT INTO COURSES VALUES ('C101','Database');
INSERT INTO COURSES VALUES ('C102','Introduction to 
Programming');
INSERT INTO COURSES VALUES ('C103','Accounting');

INSERT INTO FACULTY VALUES (1, 'Maria Rahim');
INSERT INTO FACULTY VALUES (2, 'Abeera Tariq');
INSERT INTO FACULTY VALUES (3, 'Samreen Kazi');
INSERT INTO FACULTY VALUES (4, 'Dr. Khalid');  

INSERT INTO ENROLLMENT VALUES (101, 'C101', 'B',1);
INSERT INTO ENROLLMENT VALUES (102, 'C101', 'A',2);
INSERT INTO ENROLLMENT VALUES (101, 'C102', 'B',3);
INSERT INTO ENROLLMENT VALUES (103, 'C102', 'A',3);
INSERT INTO ENROLLMENT VALUES (103, 'C103', 'A',4);
INSERT INTO ENROLLMENT VALUES (104, 'C103', 'B',4);

INSERT INTO COURSES_FACULTY VALUES ('C101',1);
INSERT INTO COURSES_FACULTY VALUES ('C101',2);
INSERT INTO COURSES_FACULTY VALUES ('C102',3);
INSERT INTO COURSES_FACULTY VALUES ('C103',4);

-- Q3
INSERT INTO COURSES VALUES ('C104','Business');
INSERT INTO COURSES_FACULTY VALUES ('C104',4);

--Q4
SELECT STUDENTNAME, COURSE, GRADE
FROM ENROLLMENT 
INNER JOIN STUDENT USING(StudentID)
INNER JOIN COURSES USING(CourseID);

--Q5
SELECT COURSE, COUNT(STUDENTID) AS NO_OF_STUDENTS
FROM ENROLLMENT
INNER JOIN COURSES USING(CourseID)
GROUP BY COURSE
ORDER BY COUNT(STUDENTID) DESC;

--Q6
SELECT STUDENTNAME, COUNT(COURSEID) AS NO_OF_COURSES
FROM ENROLLMENT
INNER JOIN STUDENT USING (STUDENTID)
GROUP BY STUDENTNAME
HAVING COUNT(COURSEID) > 1;

--Q7
SELECT COURSE, FacultyName
FROM COURSES_FACULTY
INNER JOIN COURSES USING(COURSEID)
INNER JOIN FACULTY USING(FID);

--Q8
SELECT COURSE, COUNT(FID)
FROM COURSES_FACULTY
INNER JOIN COURSES USING(COURSEID)
GROUP BY COURSE
HAVING COUNT(FID)>1;

--Q9
SELECT STUDENTNAME, COURSE, FACULTYNAME
FROM ENROLLMENT
INNER JOIN STUDENT USING(STUDENTID)
INNER JOIN COURSES USING(COURSEID)
INNER JOIN FACULTY USING(FID);

--Q10
SELECT STUDENTNAME, COURSE, GRADE
FROM ENROLLMENT
INNER JOIN STUDENT USING(STUDENTID)
INNER JOIN COURSES USING(COURSEID)
WHERE GRADE = 'A';

--Q11
SELECT FACULTYNAME, COUNT(COURSEID) AS NO_OF_COURSES
FROM COURSES_FACULTY
INNER JOIN FACULTY USING(FID)
GROUP BY FACULTYNAME
HAVING COUNT(COURSEID) > 1;

